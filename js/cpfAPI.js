/**
 * M√≥dulo de API CPF
 * Gerencia as requisi√ß√µes para a API de consulta CPF
 */

class CPFAPI {
    constructor() {
        // Sistema de m√∫ltiplas chaves API para aumentar limite di√°rio
        this.apiKeys = [
            'e3f4ee4c37600f854eeb0ec60421f16b547eb9c28982f8e8ffbbc3f93dc2b844'  // Chave atualizada
        ];
        this.currentKeyIndex = 0; // √çndice da chave atual
        this.baseURL = 'https://apicpf.com/api/consulta';
        
        console.log(`üîë Sistema configurado com ${this.apiKeys.length} chaves API`);
        console.log(`üìä Limite total estimado: ${this.apiKeys.length * 500} requisi√ß√µes/dia`);
    }
    
    /**
     * Rotaciona para a pr√≥xima chave API
     * @returns {string} - Chave API atual
     */
    getNextApiKey() {
        const currentKey = this.apiKeys[this.currentKeyIndex];
        const keyNumber = this.currentKeyIndex + 1;
        
        // Rotaciona para a pr√≥xima chave
        this.currentKeyIndex = (this.currentKeyIndex + 1) % this.apiKeys.length;
        
        console.log(`üîÑ Usando chave API #${keyNumber} (${currentKey.substring(0, 8)}...)`);
        console.log(`‚û°Ô∏è Pr√≥xima consulta usar√° chave #${this.currentKeyIndex + 1}`);
        
        return currentKey;
    }

    /**
     * Consulta dados de um CPF com rota√ß√£o inteligente de chaves
     * @param {string} cpf - CPF para consultar (apenas n√∫meros)
     * @returns {Promise<Object>} - Dados do CPF ou erro
     */
    async consultarCPF(cpf) {
        try {
            // Remove formata√ß√£o do CPF
            const cpfLimpo = CPFValidator.clean(cpf);
            
            // Valida CPF antes de fazer a requisi√ß√£o
            if (!CPFValidator.isValid(cpfLimpo)) {
                throw new Error('CPF inv√°lido');
            }
            
            // Obt√©m a pr√≥xima chave API na rota√ß√£o
            const apiKey = this.getNextApiKey();
            
            // Monta a URL da requisi√ß√£o
            const url = `${this.baseURL}?cpf=${cpfLimpo}`;
            
            // Configura√ß√µes da requisi√ß√£o
            const requestOptions = {
                method: 'GET',
                headers: {
                    'X-API-KEY': apiKey,
                    'Content-Type': 'application/json'
                }
            };
            
            console.log('Fazendo requisi√ß√£o para:', url);
            console.log('Headers:', requestOptions.headers);
            
            // Faz a requisi√ß√£o
            const response = await fetch(url, requestOptions);
            
            console.log('Status da resposta:', response.status);
            
            // Verifica se a resposta foi bem-sucedida
            if (!response.ok) {
                const errorText = await response.text();
                console.error('Erro na resposta:', errorText);
                
                switch (response.status) {
                    case 401:
                        throw new Error('Chave de API inv√°lida ou expirada');
                    case 403:
                        throw new Error('Acesso negado. Verifique suas permiss√µes');
                    case 404:
                        throw new Error('CPF n√£o encontrado na base de dados');
                    case 429:
                        // Limite atingido - tenta com a pr√≥xima chave se dispon√≠vel
                        console.warn(`‚ö†Ô∏è Limite atingido na chave atual. Tentando pr√≥xima chave...`);
                        if (this.apiKeys.length > 1) {
                            console.log('üîÑ Tentando com a pr√≥xima chave API...');
                            return await this.consultarCPF(cpf); // Recurs√£o com pr√≥xima chave
                        } else {
                            throw new Error('Limite de consultas excedido em todas as chaves. Tente novamente mais tarde');
                        }
                    case 500:
                        throw new Error('Erro interno do servidor. Tente novamente mais tarde');
                    default:
                        throw new Error(`Erro na consulta: ${response.status} - ${errorText}`);
                }
            }
            
            // Parse da resposta JSON
            const data = await response.json();
            console.log('Dados recebidos completos:', data);
            console.log('Estrutura da resposta:', JSON.stringify(data, null, 2));
            
            // Verifica se a resposta tem a estrutura esperada
            let dadosReais = data;
            
            // Se a resposta tem um campo 'data', usa ele
            if (data.data) {
                dadosReais = data.data;
                console.log('Usando data.data:', dadosReais);
            }
            
            // Se a resposta tem um campo 'result', usa ele
            if (data.result) {
                dadosReais = data.result;
                console.log('Usando data.result:', dadosReais);
            }
            
            // Log detalhado para debug
            console.log('Dados processados:', dadosReais);
            console.log('Tem nome?', !!dadosReais.nome);
            console.log('Tem name?', !!dadosReais.name);
            console.log('Keys dispon√≠veis:', Object.keys(dadosReais || {}));
            
            // Verifica se retornou dados v√°lidos (relaxando a valida√ß√£o)
            if (!dadosReais || (Object.keys(dadosReais).length === 0)) {
                return {
                    success: false,
                    error: 'CPF v√°lido, mas n√£o foram encontrados dados na base de consulta'
                };
            }
            
            return {
                success: true,
                data: this.formatarResposta(dadosReais)
            };
            
        } catch (error) {
            console.error('Erro na consulta CPF:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }
    
    /**
     * Formata a resposta da API para um formato padronizado
     * @param {Object} data - Dados brutos da API
     * @returns {Object} - Dados formatados
     */
    formatarResposta(data) {
        // Adapta a resposta baseada na estrutura real da API
        return {
            cpf: data.cpf || '',
            nome: data.nome || data.name || 'N√£o informado',
            situacao: 'Devedor na receita federal',
            dataNascimento: data.nascimento || data.birthDate || 'N√£o informado',
            mae: data.mae || data.mother || 'N√£o informado',
            endereco: {
                logradouro: data.logradouro || data.address || 'N√£o informado',
                numero: data.numero || data.number || 'N√£o informado',
                complemento: data.complemento || data.complement || '',
                bairro: data.bairro || data.district || 'N√£o informado',
                cidade: data.cidade || data.city || 'N√£o informado',
                uf: data.uf || data.state || 'N√£o informado',
                cep: data.cep || data.zipCode || 'N√£o informado'
            },
            telefones: data.telefones || data.phones || [],
            emails: data.emails || [],
            // Campos adicionais que podem existir
            rg: data.rg || 'N√£o informado',
            tituloEleitor: data.tituloEleitor || data.voterTitle || 'N√£o informado',
            dataConsulta: new Date().toLocaleString('pt-BR')
        };
    }
    
    /**
     * Testa a conectividade com a API (DESABILITADO para economizar cr√©ditos)
     * @returns {Promise<boolean>} - true se API est√° funcionando
     */
    async testarConectividade() {
        // DESABILITADO: N√£o fazer requisi√ß√µes desnecess√°rias
        console.log('‚ö†Ô∏è Teste de conectividade desabilitado para economizar cr√©ditos');
        return true;
    }
    
    /**
     * Valida se as chaves API est√£o configuradas corretamente
     * @returns {boolean} - true se pelo menos uma chave est√° presente
     */
    validarChaveAPI() {
        const chavesValidas = this.apiKeys.filter(key => key && key.length > 0);
        console.log(`üîç Chaves v√°lidas encontradas: ${chavesValidas.length}/${this.apiKeys.length}`);
        return chavesValidas.length > 0;
    }
    
    /**
     * Obt√©m estat√≠sticas das chaves API
     * @returns {Object} - Informa√ß√µes sobre as chaves
     */
    getApiKeysStats() {
        return {
            totalKeys: this.apiKeys.length,
            currentKeyIndex: this.currentKeyIndex,
            estimatedDailyLimit: this.apiKeys.length * 500,
            nextKeyToUse: this.currentKeyIndex + 1
        };
    }
}

// Torna dispon√≠vel globalmente
window.CPFAPI = CPFAPI;
